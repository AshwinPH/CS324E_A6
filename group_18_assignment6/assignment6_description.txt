The best way to put it is that this simulation (rudimentarily) depicts life. We were inspired by Conway's Game of Life to simulate a set of particles that live, die, get diseases, recover, and break down walls according to a set of rules.


Abi wrote the Plague class. This class simulates a non-deadly but highly contagious disease. It starts with one infected cell who infects all of its neighbors. The rule is that any infected cell will infect all of its living neighbors—with one exception. At every round, a medic (instantiated by the Plague class)  teleports somewhere on the screen. Everywhere the medic goes, it heals all of its infected neighbors. Cells healed by the medic then gain immunity to the disease. One expected challenge met by Abi was that she initially intended for the medic to move around less liberally (say one or two spaces over). But if that were the case, then all of the cells would very quickly become infected and the game wouldn’t be interesting. That inspired her to create a teleporting medic. Another challenge was thinking about how to implement the grid update. Since it would be costly to have every member’s class running various update methods with for loops, Abi decided to write a function into the parent cell class that automatically updated a cells neighbors according to its given parameters, which include which of cell’s neighbors ought to be changed in the next round, as well as what these cells should be changed to. Her thinking was that other members could reuse this function, so that this function could be called multiple times for different reasons in a single for loop.


Malaika wrote the Walls class. This class simulates builders and destroyers as well as a third cell called walls. It starts with some buidlers, destroyers and walls pre-existing. The first rule is that when a builder or destroyer cell has 4 white cells(builder cells) as neighbors that cell turns into a wall. The second rule is that if the wall has 2 or more neigbhoring destroyer cells that cell turns into a destroyer cell. One challenge was merging different rules with team mates. We had a different idea how the cells would work so putting it into classes took longer than expected. 

Ashwin wrote the Villager class and performed the ifnal integration. The villager class was meant to be incorporated as the "base" cell in the simulation, upon which the other classes could act or affect. Originally, the intent was to follow Conway's game of life, but add an "age" to each cell, to model population life cycle. Cells would follow slightly different rulesets based on how "old" they were. cells that  spawned in new spots would start at age 0, so only cells that did not change naturally would age. However, due to heavy miscommunications and disjoints within the team about how to implement classes and write interactivity between types of cells, I did not have time to implement this feature. Instead, the villager class simply makes the effect of the Plague class more interesting by adding movement to living cells and stopping immune and dead cells. The end product also does not fully integrate the builder and plague simulations into one seamless program, since that would have required major code refactoring. Instead, Ashwin added a function to toggle between the two independent simulations. In the future, it will pay off to create a template far ahead of time to reduce the amount of work for integration and align the workflow better.
